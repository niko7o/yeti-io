{"version":3,"sources":["Fire.js","components/Navbar/index.js","components/Login/index.js","components/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Navbar","react_default","a","createElement","Component","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","name","value","login","loading","preventDefault","auth","signInWithEmailAndPassword","state","email","password","then","success","catch","error","console","log","message","errors","signup","createUserWithEmailAndPassword","className","type","onChange","placeholder","autoComplete","onClick","Home","e","logout","signOut","show","new","title","description","picture","currentUser","database","ref","push","user","componentDidMount","on","snapshot","obj","val","list","keys","reversed","reverse","_this2","listItems","map","item","index","key","src","App","onAuthStateChanged","loggedIn","components_Navbar","components_Home","components_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.394e0331.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyC-5J_uYcnpGYDlEMYQ1MApzxnhTAeMJfo\",\n    authDomain: \"yeti-io.firebaseapp.com\",\n    databaseURL: \"https://yeti-io.firebaseio.com\",\n    projectId: \"yeti-io\",\n    storageBucket: \"yeti-io.appspot.com\",\n    messagingSenderId: \"1010299945019\"\n};\n\nconst fire = firebase.initializeApp(config);\n\nexport default fire;","import React, { Component } from 'react';\nimport './styles.css';\n\nclass Navbar extends Component {\n    render() {\n        return(\n            <nav>\n                <p>Navbar</p>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport fire from '../../Fire';\nimport './styles.css';\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: '',\n            password: '',\n            loading: false,\n            errors: ''\n        }\n    }\n\n    handleChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    login = event => {\n        this.setState({ loading: true });\n        event.preventDefault();\n        fire.auth()\n            .signInWithEmailAndPassword(this.state.email, this.state.password)\n            .then(success => {\n                this.setState({ loading: false })\n            })\n            .catch(error => {\n                console.log(error.message);\n                this.setState({\n                    errors: error.message\n                })\n            })\n    }\n\n    signup = event => {\n        this.setState({ loading: true });\n        event.preventDefault();\n        fire.auth()\n            .createUserWithEmailAndPassword(this.state.email, this.state.password)\n            .then(success => {\n                this.setState({ loading: false })\n            })\n            .catch(error => {\n                console.log(error.message);\n                this.setState({ errors: error.message })\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"Login\">\n                <input type=\"text\" onChange={this.handleChange} placeholder=\"Email\" name=\"email\" autoComplete=\"username\" />\n                <input type=\"password\" onChange={this.handleChange} placeholder=\"Password\" name=\"password\" autoComplete=\"current-password\" />\n\n                {this.state.loading && !this.state.errors ? <p className=\"preloader\">Loading ...</p> : null}\n\n                <button onClick={this.login}>login</button>\n                <button onClick={this.signup}>signup</button>\n                \n                {this.state.errors ? <p className=\"error_message\">{this.state.errors}</p> : null}\n            </div>\n        );\n    }\n}\n\nexport default Login;","import React, { Component } from 'react';\nimport fire from '../../Fire';\nimport './styles.css';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            show: false,\n            title: '',\n            description: '',\n            picture: '',\n            list: [],\n            keys: []\n        }\n    }\n\n    handleChange = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n\n    logout = () => {\n        fire.auth().signOut();\n    }\n\n    show = () => {\n        this.setState({ show: !this.state.show });\n    }\n\n    new = e => {\n        this.setState({ loading: true });\n        e.preventDefault();\n\n        let title = this.state.title;\n        let description = this.state.description;\n        let picture = this.state.picture || '';\n\n        const { currentUser } = fire.auth();\n        fire.database()\n            .ref('feed/')\n            .push({\n                title,\n                description,\n                picture,\n                user: currentUser.email\n            })\n            .then(success => {\n                this.setState({ \n                    loading: false, \n                    show: false\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n    \n    componentDidMount = () => {\n        this.setState({ loading: true });\n        \n        fire.database()\n            .ref('/feed/')\n            .on('value', snapshot => {\n                var obj = snapshot.val();\n                var list = [];\n                var keys = [];\n\n                for (let a in obj) {\n                    list.push(obj[a]);\n                    keys.push(a);\n                }\n\n                // We reverse the list so that the last posts appear first in the feed\n                const reversed = list.reverse(); \n\n                this.setState({\n                    list: reversed,\n                    keys: keys,\n                    loading: false\n                });\n            });\n    };\n\n    render() {\n        const listItems = this.state.list.map((item, index) => (\n            <div key={index} className=\"Post\">\n                <p className=\"Post_user\">Posted by {item.user}</p>\n                {this.state.picture && this.state.picture !== '' ? (<img className=\"Post_image\" src={item.picture} />) : null }\n                <div className=\"Post_info\">\n                    <p className=\"Post_title\">{item.title}</p>\n                    <p className=\"Post_description\">{item.description}</p>\n                </div>\n            </div>\n        ));\n\n        return (\n            <div>\n                { this.state.show ? (\n                    <div>\n                        <div>\n                            <button onClick={this.show}>Hide</button>\n                        </div>\n                        <div className=\"Form_create\">\n                            <input value={this.state.title} onChange={this.handleChange} name=\"title\" placeholder=\"Title..\" />\n                            <input value={this.state.description} onChange={this.handleChange} name=\"description\" placeholder=\"Description..\" />\n                            <input value={this.state.picture} onChange={this.handleChange} name=\"picture\" placeholder=\"Picture URL..\" />\n                            <button onClick={this.new} className=\"btn_submit\">Submit Post</button>\n                        </div>\n                    </div>\n                ) : null }\n\n                {!this.state.show ? (\n                    <button onClick={this.show} className=\"btn_create\">Create post</button>\n                ) : null }\n\n                { this.state.loading ? (\n                    <div className=\"preloader\">Loading Home..</div>\n                ) : null }\n\n                <div className=\"cards\">\n                    { listItems }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport fire from './Fire'\n/* Components */\nimport Navbar from './components/Navbar';\nimport Login from './components/Login';\nimport Home from './components/Home';\n/* Styles */\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      loggedIn: null\n    };\n  }\n\n  componentDidMount = () => {\n    this.setState({ loading: true });\n    fire.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({ \n          loggedIn: true, \n          loading: false \n        });\n      } else {\n        this.setState({ \n          loggedIn: false, \n          loading: false \n        });\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar></Navbar>\n        <div className=\"App_centered\">\n          {\n            this.state.loggedIn \n            ? <Home />\n            : <Login />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}